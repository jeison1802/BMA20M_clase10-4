# -*- coding: utf-8 -*-
"""
Spyder Editor

This is a temporary script file.
"""

print("---------Equivalencias------------------")
a = 5
print(a)

a+=3 # a = a + 3
print(a)

b = 9

b/=3
print(b)


### cadenas 

print("------Cadenas---------")


var1 = "Uni"

var1+="versidad"

print(var1)


### Condicional while 

print("---------Condicional while----------------")
cont = 1 
s = 0 
# s = 1 + 3 +  5 + 7 + ...+ (2n-1)

n  = int(input("Ingrese el numero de elementos: "))

# while(cont<=n):
#     term = 2*cont -1
#     s+=term
#     cont+=1
 
# print(f"El numero de termino {n} es la suma {s}")    



### Otra forma 
suma = 0
for i in range(1,2*n,2):
    suma +=i

print(suma)


### Break 

print("----------Break------------------")

cad1 = "universidad"

i = 0 

while(i<len(cad1)):
    print(cad1[i],end="")
    
    if(cad1[i]=="e"):
        break
    i+=1
    

### continue 


print("\n------Continue-------------")    
    

cad2 = "Electronica"
    
j = 0 

while(j<len(cad2)-1):
         
    j+=1
    
    if(cad2[j]=="o"):
        continue
    #j+=1
    print(cad2[j],end="")
    
    
print("\n----------pass-----------")


cad3 = "Telecomunicaciones"


k = 0 

while(k<=len(cad3)-1):
   
    if (cad3[k] == "u"):
        pass
   
    print(cad3[k],end = "") 
    k+=1


### Condicional for   
   
print("------Condicional for--------")   

### s = 1 + 1/1! + 1/2! + ... 



for i in range(1,15,2):
    print(i,end="")
    
for j in range(1,31):
    print(j,end="")
    
    
print("--------Ejercicio resuelto-------------")

import math as mt
           
nt = int(input("Ingrese el numero de terminos: ")) 
s =  0
for cont in range(nt):
    fact = mt.factorial(cont)
    term = 1/fact
    s+=term
    if term>0.0001:
        print(term,end=" ")
    
    
print(f"La suma es: {s}")
    

band = 1

while(band==1):
    term = int(input("Ingrese un numero: "))    
    s+=term   
    if term == 1:
        band = 0
        
print("La suma es: ",s)        
        

print("-------------Listas-------------------")    

### Las listas son agrupamientos de distintos tipos 
    

L1 =[]

L2 = list()

print(type(L1))
print(type(L2))


L3 = [18,19,20,"Tesla",[1,2,3],"Fisher",777]


print(L3)

print(L3[0])

print(L3[-1])


print("------------Inversa-------------------")    


print(L3[-2])

print("-----------Longitud de la lista---------------")
print(len(L3))
    
    
    
print("------Cambio de valores----------")



L3[2] ="Dirac"


print(L3)



print("----------Operadores con lista----------------------")


L1 = [4,5,6]
L2 = [2,3]

L4 = L1 + L2
print(L1)
print(L2)
print(L4)


L5 = L2*3 

print(L5)


print("------Funciones con las que operan la lista-------------")

### agregar elementos a la lista 


### append
### insert
### extend 

L6 = ["circuitos",[2,3,4],16,"electronicos"]

print(L6)

L6.append("Antenas")

print(L6)
print("---------Insert---------")

L6.insert(3,"vacaciones")
    

print(L6)    

print("extend")    



L6.extend([10,15,17,"56"])


print(L6)
    
    
print("------------Para quitar elementos------------------------")    
    
    ### uso de del con el indice 
    
L7 = ["Tecnologia","Energia",12,70,30,[5,6,7],100,200]

print(L7)

del L7[1]

print(L7)

del L7[3]

print(L7)


print("------------Remove----------------")
    
    
    
L7.remove([5,6,7]) 
print(L7)   
    
    
print("--------pop--------")

### uso de pop para la transferencia de valores entre listas 

L7 = ["Tecnologia","Energia",12,70,30,[5,6,7],100,200]
    
    
L7.pop()

print(L7)

    
L7 = ["Tecnologia","Energia",12,70,30,[5,6,7],100,200]
        
L7.pop(4) 
print(L7)


L8 = []

L8.append(L7.pop(5))

print(L8)
   

print("-------Referencias y copia de listas--------------")
    

L9 = [20,70,"Galois",888,[2,4,5]]


print(L9)

L10 = L9  ## Referencia de Listas 

print(L10)

L10.append(1000000)
print(L10)

print(L9)


print("--------copias--------------")


L9 = [20,70,"Galois",888,[2,4,5]]

print(L9)
    
L11 = L9[:]
print(L11)

L11.remove(888)
print(L11)
print(L9)

    
L12 = L9.copy()

L12.append("clases")
print(L12)    
    
print(L9)




Lx = [4,7,9,1,20,100]
print(Lx)


for elem in Lx:
  print(elem,end=" ")


print("\n")
### Otra forma 

    
    
    
    
    
    
    
    
    
    
